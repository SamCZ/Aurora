#include "../ps_common.h"
#include "cb_pbr.h"
#include "pbr.glsl"

in vec2 TexCoord;

layout(binding = 0) uniform sampler2D AlbedoAndFlagsRT;
layout(binding = 1) uniform sampler2D NormalsRT;
layout(binding = 2) uniform sampler2D RoughnessMetallicAORT;
layout(binding = 3) uniform sampler2D SkyRT;
layout(binding = 4) uniform sampler2D SSAORT;

layout(binding = 5) uniform sampler2D DepthMap;

layout(binding = 6) uniform samplerCube PreFilteredMap;
layout(binding = 7) uniform samplerCube IrradianceConvolutionMap;
layout(binding = 8) uniform sampler2D BrdfLutMap;
layout(binding = 9) uniform sampler2D DirCascadeMaps[4];

out vec4 FragColor;

float saturate(float val)
{
	return clamp(val, 0, 1);
}

vec3 GetSceneWorldPos()
{
	ivec2 texel = ivec2(gl_FragCoord.xy);
	vec4 clipSpaceLocation;
	clipSpaceLocation.xy = TexCoord * 2.0f - 1.0f;
	clipSpaceLocation.z = texelFetch(DepthMap, texel, 0).r;
	clipSpaceLocation.w = 1.0f;

	vec4 homogenousLocation = u_InvProjectionView * clipSpaceLocation;
	return homogenousLocation.xyz / homogenousLocation.w;
}

#ifdef DIR_LIGHT_SHADOWS

float SampleShadowMap(sampler2D shadowMap, vec2 coords, float compare)
{
	return step(compare, texture2D(shadowMap, coords, 0).r);
}

float DoShadowMappingLinear(sampler2D shadowMap, vec2 coords, float compare, vec2 texelSize)
{
	vec2 pixelPos = coords / texelSize + vec2(0.5);
	vec2 fracPart = fract(pixelPos);
	vec2 startTexel = (pixelPos - fracPart) * texelSize;

	float blTexel = SampleShadowMap(shadowMap, startTexel, compare);
	float brTexel = SampleShadowMap(shadowMap, startTexel + vec2(texelSize.x, 0.0), compare);
	float tlTexel = SampleShadowMap(shadowMap, startTexel + vec2(0.0, texelSize.y), compare);
	float trTexel = SampleShadowMap(shadowMap, startTexel + texelSize, compare);

	float mixA = mix(blTexel, tlTexel, fracPart.y);
	float mixB = mix(brTexel, trTexel, fracPart.y);

	return 1.0 - mix(mixA, mixB, fracPart.x);

	/*float currentDepth = projCoords.z;
	vec2 fracPart = fract(projCoords.xy);

	ivec2 shadowCoord = ivec2(projCoords.xy * textureSize(DirCascadeMaps[layer], 0)) + offset;

	float blTexel = SampleShadowMap(DirCascadeMaps[layer], shadowCoord, currentDepth - bias);
	float brTexel = SampleShadowMap(DirCascadeMaps[layer], shadowCoord + ivec2(-1, 0), currentDepth - bias);
	float tlTexel = SampleShadowMap(DirCascadeMaps[layer], shadowCoord + ivec2(0, 1), currentDepth - bias);
	float trTexel = SampleShadowMap(DirCascadeMaps[layer], shadowCoord + ivec2(1, 1), currentDepth - bias);

	float mixA = mix(blTexel, tlTexel, fracPart.y);
	float mixB = mix(brTexel, trTexel, fracPart.y);

	return 1.0 - mix(mixA, mixB, fracPart.x);*/
}

const int cascadeCount = 4;

float DoShadowMapping(vec3 worldPos, vec3 normal)
{
	vec4 fragPosViewSpace = u_ViewMatrix * vec4(worldPos, 1.0);
	float depthValue = abs(fragPosViewSpace.z);

	int layer = -1;
	for (int i = 0; i < cascadeCount; ++i)
	{
		if (depthValue <= u_CascadeDistances[i].x)
		{
			layer = i;
			break;
		}
	}
	if (layer == -1)
	{
		layer = cascadeCount;
	}

	layer = 0;

	//layer = cascadeCount - layer;

	//layer = 1;

	//return float(layer) / float(cascadeCount);

	vec4 fragPosLightSpace = u_CascadeMatrices[layer] * vec4(worldPos, 1.0);
	vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
	projCoords.xy = projCoords.xy * 0.5 + 0.5;

	for(int i = 0; i < 3; i++) {
		if(projCoords[i] > 1.0 || projCoords[i] < 0.0) {
			return 0;
		}
	}

	float currentDepth = projCoords.z;

	float bias = g_DirLight.ShadowIntensity.y;
	//bias = max(0.05 * (1.0 - dot(normal, g_DirLight.Direction)), 0.005);

	/*if (layer == cascadeCount)
	{
		bias *= 1 / (far_plane * 0.5f);
	}
	else
	{
		bias *= 1 / (u_CascadeDistances[layer].x * 0.5f);
	}*/

	vec2 texelSize = 1.0f / vec2(u_CascadeDistances[layer].y);
	float shadow = 0;

	if(true)
	{
		for(float y = -1.0; y <= 1.0f; y += 1.0f)
		{
			for(float x = -1.0; x <= 1.0f; x += 1.0f)
			{
				vec2 coordOffset = vec2(x, y) * texelSize;
				shadow += DoShadowMappingLinear(DirCascadeMaps[layer], projCoords.xy + coordOffset, projCoords.z - bias, texelSize);
			}
		}
		shadow /= 9.0f;
	}
	else
	{
		shadow = DoShadowMappingLinear(DirCascadeMaps[layer], projCoords.xy, projCoords.z - bias, texelSize);
	}

	/*vec2 texelSize = 1.0f / vec2(u_CascadeDistances[layer].y);
	for(int x = -1; x <= 1; ++x)
	{
		for(int y = -1; y <= 1; ++y)
		{
			float pcfDepth = texture(DirCascadeMaps[layer], projCoords.xy + vec2(x, y) * texelSize, 0).r;
			shadow += (currentDepth - bias) > pcfDepth ? 1.0 : 0.0;
			//shadow += DoShadowMappingLinear(worldPos, ivec2(x, y), projCoords, bias);
		}
	}
	shadow /= 9.0;*/

	return shadow;
}

#endif

void main()
{
	vec4 albedoFlags = texelFetch(AlbedoAndFlagsRT, ivec2(gl_FragCoord.xy), 0);
	vec4 normals = texelFetch(NormalsRT, ivec2(gl_FragCoord.xy), 0);
	vec4 RougnessMetallicOcclusion = texelFetch(RoughnessMetallicAORT, ivec2(gl_FragCoord.xy), 0);

	if(albedoFlags.a == 0)
	{
		FragColor = texelFetch(SkyRT, ivec2(gl_FragCoord.xy), 0);
		return;
	}

	/*if(true)
	{
		FragColor = vec4(albedoFlags.rgb, 1.0f);
		return;
	}*/

	vec3 WorldPos = GetSceneWorldPos();

	vec3 albedo = albedoFlags.rgb;
	uint flags = uint(albedoFlags.a);

	float roughness = TestOptions.x;
	float metallic = TestOptions.y;
	float ao = RougnessMetallicOcclusion.z + 0.5;
	ao = min(ao, 1.0);

	vec3 N = normalize(normals.xyz * 2.0f - 1.0f);
	vec3 V = normalize(CameraPos.xyz - WorldPos);
	vec3 R = reflect(-V, N);

	vec3 F0 = vec3(0.04f);
	//F0 = mix(F0, clamp(albedo, 0.0001f, 1), metallic);

	vec3 Lo = vec3(0.0);
	//Dir light

	{
		vec3 L = normalize(g_DirLight.Direction);
		vec3 H = normalize(V + L);
		vec3 radiance = g_DirLight.Radiance * g_DirLight.Multiplier;

		// Cook-Torrance BRDF
		float NDF = DistributionGGX(N, H, roughness);
		float G   = GeometrySmith(N, V, L, roughness);
		vec3 F    = fresnelSchlick(max(dot(H, V), 0) - 0.00001f, F0);

		vec3 nominator    = NDF * G * F;
		float denominator = (4.0f * max(dot(N, V), 0.0f) * max(dot(N, L), 0.0f)) + 0.001f; // 0.001 to prevent divide by zero.
		vec3 specular = nominator / denominator;

		// kS is equal to Fresnel
		vec3 kS = F;
		// for energy conservation, the diffuse and specular light can't
		// be above 1.0 (unless the surface emits light); to preserve this
		// relationship the diffuse component (kD) should equal 1.0 - kS.
		vec3 kD = vec3(1.0) - kS;
		// multiply kD by the inverse metalness such that only non-metals
		// have diffuse lighting, or a linear blend if partly metal (pure metals
		// have no diffuse light).
		kD *= 1.0 - metallic;

		// scale light by NdotL
		float NdotL = max(dot(N, L), 0.0);

		// add to outgoing radiance Lo
		//Lo += (kD * albedo / PI + specular) * radiance * NdotL; // note that we already multiplied the BRDF by the Fresnel (kS) so we won't multiply by kS again
		Lo += (albedo + specular) * radiance * NdotL; // note that we already multiplied the BRDF by the Fresnel (kS) so we won't multiply by kS again
	}
#ifdef DIR_LIGHT_SHADOWS
	Lo = mix(Lo, Lo * (1.0f - (g_DirLight.ShadowIntensity.x)), DoShadowMapping(WorldPos, N));
#endif
	// ambient lighting (we now use IBL as the ambient term)
	vec3 F = fresnelSchlickRoughness(max(dot(N, V), 0.0), F0, roughness);

	vec3 kS = F;
	vec3 kD = 1.0 - kS;
	kD *= 1.0 - metallic;

	vec3 irradiance = texture(IrradianceConvolutionMap, N).rgb;
	vec3 diffuse = irradiance * albedo;

	const float MAX_REFLECTION_LOD = 4.0;

	vec3 prefilteredColor = textureLod(PreFilteredMap, R, roughness * MAX_REFLECTION_LOD).rgb;

	vec2 brdf  = texture(BrdfLutMap, vec2(max(dot(N, V), 0.0), roughness)).rg;
	vec3 specular = prefilteredColor * (F * brdf.x + brdf.y);
	//vec3 specular = prefilteredColor * F;
	vec3 ambient = (kD * diffuse + specular) * ao;

	vec3 color = ambient + Lo;

	//color = vec3(DoShadowMappingLinear(WorldPos, ivec2(0, 0)));
	//color = mix(color, color * (1.0f - (g_DirLight.ShadowIntensity.x)), DoShadowMapping(WorldPos, N));
	//color = vec3(DoShadowMapping(WorldPos, N));

	if(any(isnan(color)))
	{
		color = albedo;
	}

	FragColor.rgb = color;
	FragColor.a = 1;
}