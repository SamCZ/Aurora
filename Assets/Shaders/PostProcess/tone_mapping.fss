out vec4 FragColor;
in vec2 TexCoord;

uniform sampler2D SceneTarget;
uniform sampler2D LutTarget;

// Converts a color from linear light gamma to sRGB gamma
vec4 fromLinear(vec4 linearRGB)
{
	bvec3 cutoff = lessThan(linearRGB.rgb, vec3(0.0031308));
	vec3 higher = vec3(1.055)*pow(linearRGB.rgb, vec3(1.0/2.4)) - vec3(0.055);
	vec3 lower = linearRGB.rgb * vec3(12.92);

	return vec4(mix(higher, lower, cutoff), linearRGB.a);
}

// Converts a color from sRGB gamma to linear light gamma
vec4 toLinear(vec4 sRGB)
{
	bvec3 cutoff = lessThan(sRGB.rgb, vec3(0.04045));
	vec3 higher = pow((sRGB.rgb + vec3(0.055))/vec3(1.055), vec3(2.4));
	vec3 lower = sRGB.rgb/vec3(12.92);

	return vec4(mix(higher, lower, cutoff), sRGB.a);
}

vec4 lookup(in vec4 textureColor, in sampler2D lookupTable) {
	#ifndef LUT_NO_CLAMP
	textureColor = clamp(textureColor, 0.0, 1.0);
	#endif

	mediump float blueColor = textureColor.b * 63.0;

	mediump vec2 quad1;
	quad1.y = floor(floor(blueColor) / 8.0);
	quad1.x = floor(blueColor) - (quad1.y * 8.0);

	mediump vec2 quad2;
	quad2.y = floor(ceil(blueColor) / 8.0);
	quad2.x = ceil(blueColor) - (quad2.y * 8.0);

	highp vec2 texPos1;
	texPos1.x = (quad1.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.r);
	texPos1.y = (quad1.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.g);

	#ifdef LUT_FLIP_Y
	texPos1.y = 1.0-texPos1.y;
	#endif

	highp vec2 texPos2;
	texPos2.x = (quad2.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.r);
	texPos2.y = (quad2.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.g);

	#ifdef LUT_FLIP_Y
	texPos2.y = 1.0-texPos2.y;
	#endif

	lowp vec4 newColor1 = texture2D(lookupTable, texPos1);
	lowp vec4 newColor2 = texture2D(lookupTable, texPos2);

	lowp vec4 newColor = mix(newColor1, newColor2, fract(blueColor));
	return newColor;
}

void main()
{
	FragColor = lookup(fromLinear(texture(SceneTarget, TexCoord)), LutTarget);
}